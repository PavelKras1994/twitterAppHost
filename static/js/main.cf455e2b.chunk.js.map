{"version":3,"sources":["Components/Post/Post.js","Components/Posts/Posts.js","Components/Header/Header.js","Components/UserPage/MyPosts/MyPost/Comments/Comments.js","Components/UserPage/MyPosts/MyPost/MyPost.js","Components/UserPage/MyPosts/MyPosts.js","Components/UserPage/UserPage.js","App.js","serviceWorker.js","index.js"],"names":["Post","user","content","id","comments","isShown","getFilteredComments","filteredComments","className","onClick","map","com","email","body","Posts","posts","getComments","shownHandler","randomPosts","post","key","Math","random","userId","Header","to","Comments","createComment","addComment","myCommentsSeeHandler","seeComments","comment","author","name","onChange","value","commentEdit","MyPost","delMyPost","changeMyPost","editMyPost","updateMyPost","isUpdating","edit","MyPosts","myPosts","UserPage","myPostHandler","addPost","newPost","placeholder","length","App","state","axios","get","then","res","setState","data","fC","filter","postId","setTimeout","console","log","undefined","e","target","push","nP","filteredPosts","indexPost","findIndex","newComment","i","n","floor","catch","error","finally","this","path","exact","render","match","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cf455e2b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Post.scss';\r\n\r\nconst Post = ({\r\n    user,\r\n    content,\r\n    id,\r\n    comments,\r\n    isShown,\r\n    getFilteredComments,\r\n    filteredComments }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"post\">\r\n\r\n            <div className=\"post__author\">User name: {user}</div>\r\n            <div className=\"post__content\">{content}</div>\r\n            <div onClick={() => getFilteredComments(id, comments)} className=\"post__comment\">\r\n                {isShown['post' + id] ? 'Hide comments' : 'See comments'}\r\n            </div>\r\n            {isShown['post' + id] ?\r\n                    filteredComments.map((com) => {\r\n                        return (\r\n                            <>\r\n                        <div className=\"post__email\"> {com.email} </div>\r\n                        <div className=\"post__body\"> {com.body} </div>\r\n                            </>\r\n                        )\r\n                    })\r\n                : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\n\r\nimport './Posts.scss';\r\nimport Post from '../Post/Post';\r\n\r\nconst Posts = ({ posts, getComments, comments, isShown, shownHandler, randomPosts, getFilteredComments, filteredComments }) => {\r\n    return (\r\n        <div className=\"posts\">\r\n            <h3> Users random posts </h3>\r\n            <div className=\"posts__wrapper\">\r\n            {randomPosts.map((post) => (\r\n                <Post \r\n                    key={Math.random()}\r\n                    user={post.userId}\r\n                    content={post.body} \r\n                    getComments={getComments}\r\n                    id={post.id}\r\n                    comments={comments}\r\n                    isShown={isShown}\r\n                    shownHandler={shownHandler}\r\n                    getFilteredComments={getFilteredComments}\r\n                    filteredComments={filteredComments}\r\n                    />\r\n            )\r\n            )}\r\n            </div>\r\n          \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\n\r\nimport './Header.scss';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__wrapper\">\r\n                <div className=\"header__navigation\">\r\n                    <NavLink\r\n                        to={`/`}\r\n                        className=\"header__link\">\r\n                        Random posts\r\n                    </NavLink>\r\n                    <NavLink\r\n                        to={`/user`}\r\n                        className=\"header__link\">\r\n                        My page\r\n                    </NavLink>\r\n                </div>\r\n                <div>  </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Comments.scss';\r\n\r\nconst Comments = ({ post, createComment, addComment, myCommentsSeeHandler }) => {\r\n    return (\r\n        <div className=\"comments\">\r\n            {\r\n            post.comments.seeComments ?\r\n            <>\r\n            <div className=\"comments__content\">\r\n                {post.comments.map((comment) => {\r\n                    return (\r\n                        <div className=\"comments__comment\">\r\n                            <div className=\"comments__author\"> {comment.author} </div>\r\n                            <div className=\"comments__content\"> {comment.content} </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"myPost__edit\">\r\n                <textarea\r\n                    className=\"myPost__input\"\r\n                    name={[post.id]}\r\n                    onChange={createComment}\r\n                    value={post.commentEdit}>\r\n                </textarea>\r\n                <div\r\n                    onClick={() => addComment(post.id)}\r\n                    className=\"material-icons myPost__icon\"\r\n                >\r\n                    add\r\n                </div>\r\n            </div>\r\n            </> : null\r\n}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","import React from 'react';\r\n\r\nimport './MyPost.scss';\r\nimport Comments from './Comments/Comments';\r\n\r\nconst MyPost = ({ post, delMyPost, changeMyPost, editMyPost, updateMyPost, createComment, addComment, myCommentsSeeHandler }) => {\r\n    return (\r\n        <div className=\"myPost\">\r\n            <div className=\"myPost__content\">\r\n                {post.content}\r\n            </div>\r\n            <div className=\"myPost__footer\">\r\n            <div onClick={() => myCommentsSeeHandler(post.id)} className=\"comments__text\">\r\n                {post.comments.seeComments ? 'Hide comments' : 'See comments'}\r\n            </div>\r\n            <div className=\"myPost__ui\">\r\n                <div onClick={() => delMyPost(post.id)} className=\"material-icons myPost__delete \">\r\n                    delete\r\n                </div>\r\n                <div onClick={() => updateMyPost(post.id)} className=\"material-icons myPost__editPost\">\r\n                    create\r\n                </div>\r\n            </div>\r\n            </div>\r\n            {post.isUpdating ?\r\n                (\r\n                    <div className=\"myPost__edit\">\r\n                        <textarea\r\n                            className=\"myPost__input\"\r\n                            name={[post.id]}\r\n                            onChange={editMyPost}\r\n                            value={post.edit}>\r\n\r\n\r\n                        </textarea>\r\n                        <div\r\n                            onClick={() => changeMyPost(post.id)}\r\n                            className=\"material-icons myPost__icon\"\r\n                        >\r\n                            check\r\n                        </div>\r\n                    </div>\r\n                )\r\n                : null}\r\n\r\n\r\n\r\n                    <Comments\r\n                        post={post}\r\n                        createComment={createComment}\r\n                        addComment={addComment}\r\n                        myCommentsSeeHandler={myCommentsSeeHandler}\r\n                    />\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPost;\r\n","import React from 'react';\r\n\r\nimport './MyPosts.scss';\r\nimport MyPost from './MyPost/MyPost';\r\n\r\nconst MyPosts = ({ myPosts, delMyPost, changeMyPost, editMyPost, updateMyPost, createComment, addComment, myCommentsSeeHandler }) => {\r\n    return (\r\n        \r\n        <div className=\"myPosts\">\r\n            {\r\n            myPosts.map((post) => {\r\n                return (\r\n                    <MyPost \r\n                        post={post}\r\n                        delMyPost={delMyPost}\r\n                        changeMyPost={changeMyPost}\r\n                        editMyPost={editMyPost}\r\n                        updateMyPost={updateMyPost}\r\n                        createComment={createComment}\r\n                        addComment={addComment}\r\n                        myCommentsSeeHandler={myCommentsSeeHandler}\r\n                    />\r\n            )\r\n\r\n\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\n\r\nimport './UserPage.scss';\r\nimport MyPosts from './MyPosts/MyPosts';\r\n\r\nconst UserPage = ( {myPostHandler, addPost, newPost, myPosts, delMyPost, changeMyPost, editMyPost, updateMyPost, createComment, addComment,\r\n    myCommentsSeeHandler }) => {\r\n    return (\r\n        <>\r\n        <div className=\"userPage\">\r\n            <input \r\n            className=\"userPage__input\"\r\n            placeholder=\"Write something...\"\r\n            value={newPost.content}\r\n            onChange={myPostHandler} \r\n            >\r\n            \r\n            </input>\r\n            <button onClick={addPost} className=\"userPage__button\"> Add </button>\r\n            {myPosts.length !== 0 ? (<div className=\"userPage__myPosts\"> My posts: </div>) : null}\r\n            <MyPosts \r\n                myPosts={myPosts}\r\n                delMyPost={delMyPost}\r\n                changeMyPost={changeMyPost}\r\n                editMyPost={editMyPost}\r\n                updateMyPost={updateMyPost}\r\n                createComment={createComment}\r\n                addComment={addComment}\r\n                myCommentsSeeHandler={myCommentsSeeHandler}\r\n            /> \r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserPage;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\n\nimport Posts from './Components/Posts/Posts';\nimport Header from './Components/Header/Header';\nimport UserPage from './Components/UserPage/UserPage';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    posts: [],\n    comments: {},\n    isShown: {},\n    randomPosts: [],\n    filteredComments: [],\n    newPost: {\n      content:''\n    },\n    myPosts: [],\n  }\n\n  componentDidMount() {\n    axios.get(`http://jsonplaceholder.typicode.com/posts/`)\n      .then(\n        res => {\n          this.setState(\n            { posts: res.data }\n          )\n          this.getComments()\n          for (let i = 0; i < 10; i++) {\n            let n = Math.floor(Math.random() * 100)\n            const { randomPosts } = this.state\n            const post = this.state.posts[n]\n            randomPosts.push(post)\n            this.setState({\n              randomPosts: randomPosts\n            })\n          }\n\n        })\n\n      .catch(error => {\n        console.log('[error]', error);\n      })\n      .finally(\n        () => {\n          console.log('[this.state.randomPosts!!]', this.state.randomPosts);\n        }\n      )\n  }\n\n\n  getComments = () => {\n    axios.get(`http://jsonplaceholder.typicode.com/comments`)\n      .then(res => {\n        this.setState(\n          { comments: res.data }\n        )\n      })\n  }\n\n\n  getFilteredComments = (id, comments) => {\n    const fC = comments.filter(comment => comment.postId === id)\n    this.shownHandler(id)\n    this.setState({\n      filteredComments: fC\n    })\n    setTimeout(() => {\n      console.log('[this.state.fil]', this.state.filteredComments)\n    }, 1000\n    )\n  }\n\n\n  shownHandler = (id) => {\n    const { isShown } = this.state\n    if (isShown['post' + id] === undefined) {\n      isShown['post' + id] = true\n    }\n    else {\n      isShown['post' + id] = !this.state.isShown['post' + id]\n    }\n    this.setState({\n        isShown: isShown\n      }\n    )\n  }\n\n\n  myPostHandler = (e) => {\n    const newPost = {      \n    content: '',\n    id: '',\n    isUpdating: false,\n    edit: false,\n    comments: [],\n    seeComments: false\n  }\n    newPost.content = e.target.value\n    this.setState({\n      newPost: newPost\n    })\n  }\n\n\n  addPost = () => {\n    if (this.state.newPost.content === '') {\n      return\n    }\n    const { myPosts } = this.state\n    const {newPost} = this.state\n    newPost.id=Math.random()\n    newPost.edit=newPost.content\n    myPosts.push(newPost)\n    const nP = {...newPost}\n    nP.content =''\n    this.setState({\n      myPosts: myPosts,\n      newPost: nP\n    })\n  }\n\n\n  delMyPost = (id) => {\n    let filteredPosts = this.state.myPosts.filter(post => post.id !== id)\n    this.setState({\n      myPosts: filteredPosts\n    })\n  }\n\n\n  changeMyPost = (id) => {\n    const { myPosts } = this.state\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    myPosts[indexPost].content = myPosts[indexPost].edit\n    myPosts[indexPost].isUpdating = !myPosts[indexPost].isUpdating\n    this.setState({\n      myPosts: myPosts,\n\n    })\n  }\n\n\n  updateMyPost =(id) => {\n    const { myPosts } = this.state\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    myPosts[indexPost].isUpdating = !this.state.myPosts[indexPost].isUpdating\n    console.log('[this.state.myPosts[indexPost].isUpdating]', this.state.myPosts[indexPost].isUpdating);\n    this.setState({\n      myPosts: myPosts\n    })\n  }\n\n  \n  editMyPost = (e)  => { \n    const { myPosts } = this.state\n    const id = +e.target.name\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    myPosts[indexPost].edit = e.target.value\n    this.setState({\n      myPosts: myPosts\n    })\n  }\n\n\n  createComment = (e) => {\n    const { myPosts } = this.state\n    const id = +e.target.name\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    myPosts[indexPost].commentEdit = e.target.value\n\n    this.setState({\n      myPosts: myPosts\n    })\n  }\n\n\n  addComment = (id) => {\n    const { myPosts } = this.state\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    const newComment = {\n      content: myPosts[indexPost].commentEdit,\n      id,\n      author: \"User\",\n    }\n    myPosts[indexPost].comments.push(newComment)\n    myPosts[indexPost].commentEdit = \"\"\n    this.setState({\n      myPosts: myPosts,\n    })\n  }\n\n\n  myCommentsSeeHandler = (id) => {\n    const { myPosts } = this.state\n    const indexPost = this.state.myPosts.findIndex(post => post.id === id)\n    myPosts[indexPost].comments.seeComments = !this.state.myPosts[indexPost].comments.seeComments\n    this.setState({\n      myPosts\n    })\n  }\n\n\n  render() {\n    const { posts, comments, isShown, randomPosts, myPosts, newPost } = this.state\n    return (\n      <div className=\"App\">\n        <Header />\n        <Switch>\n        <Route path=\"/\" exact render={({ match }) => (\n          <Posts\n            posts={posts}\n            comments={comments}\n            isShown={isShown}\n            getComments={this.getComments}\n            state={this.state}\n            shownHandler={this.shownHandler}\n            randomPosts={randomPosts}\n            getFilteredComments={this.getFilteredComments}\n            filteredComments={this.state.filteredComments}\n          />\n        )} />\n        <Route path=\"/user\" render={() => (\n          <UserPage\n            myPostHandler={this.myPostHandler}\n            myPosts={myPosts}\n            addPost={this.addPost}\n            newPost={newPost}\n            delMyPost={this.delMyPost}\n            changeMyPost={this.changeMyPost}\n            editMyPost={this.editMyPost}\n            updateMyPost={this.updateMyPost}\n            createComment={this.createComment}\n            addComment={this.addComment}\n            myCommentsSeeHandler={this.myCommentsSeeHandler}\n          />\n          )} />\n          <Redirect to=\"/\" />\n        </Switch>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n  <App />,\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}